service: stations-api
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.8
  httpApi:
    id: ${ssm:/weather-app/http-api-id}

custom:
  pythonRequirements:
    layer: true
    dockerizePip: false
    usePoetry: true

resources:
  Resources:
    StationsApiRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: StationsApiRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: setupLambdaPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:BatchGetItem
                  Resource:
                    - ${ssm:/weather-app/stations-table-arn}
functions:
  stations-api:
    handler: stations_api.app.handler
    events:
      - httpApi:
          method: ANY
          path: /api/stations/{proxy+}
    layers:
      - Ref: PythonRequirementsLambdaLayer
    timeout: 300
    role: StationsApiRole
    package:
      individually: true
      patterns:
        - 'stations_api/**'
        - '!tests/**'
        - '!node_modules/**'
        - '!package.json'
        - '!package-lock.json'

plugins:
   - serverless-python-requirements
